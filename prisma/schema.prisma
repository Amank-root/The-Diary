// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "@prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Better Auth required tables

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  username      String?  @unique
  image         String?
  bio           String?
  website       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  diaries  Diary[]
  notes    Note[]

  // Follower/Following
  readers Reader[] @relation("UserReaders")
  reading Reader[] @relation("UserReading")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

// Your existing models

model Reader {
  id        String   @id @default(cuid())
  reader    User     @relation("UserReading", fields: [readerId], references: [id], onDelete: Cascade)
  readerId  String
  reading   User     @relation("UserReaders", fields: [readingId], references: [id], onDelete: Cascade)
  readingId String
  createdAt DateTime @default(now())

  @@unique([readerId, readingId])
}

model Note {
  id        String   @id @default(uuid())
  position  Json
  title     String?
  text      String
  color     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Diary {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  diaryCoverImage String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  types           DiaryType
  pages           Page[]
}

model Page {
  id           String   @id @default(cuid())
  content      Json
  pageNumber   Int
  pageImageUrl String?
  isPublic     Boolean  @default(false)
  diary        Diary    @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum DiaryType {
  PERSONAL
  SPECIAL
  GENERAL
  TRIVIAL
}

// model User {
//   id            String   @id @default(cuid())
//   email         String   @unique
//   name          String?
//   username      String   @unique
//   password      String
//   diaries       Diary[]
//   authenticated Boolean
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }

// model Diary {
//   id        String   @id @default(cuid())
//   slug      String   @unique
//   title     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String

//   types DiaryTypeOnDiary[]
//   pages Page[] // One diary has many pages
// }

// model Page {
//   id         String   @id @default(cuid())
//   content    Json // TipTap content as JSON
//   pageNumber Int[] // Page ordering
//   isPublic   Boolean @default(false)
//   diary      Diary    @relation(fields: [diaryId], references: [id])
//   diaryId    String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

// model DiaryTypeOnDiary {
//   id      String    @id @default(cuid())
//   diary   Diary     @relation(fields: [diaryId], references: [id])
//   diaryId String
//   type    DiaryType
// }

// enum DiaryType {
//   PERSONAL
//   SPECIAL
//   GENERAL
//   TRIVIAL
// }
